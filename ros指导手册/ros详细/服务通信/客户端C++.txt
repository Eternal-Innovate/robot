#include "service_interfaces/srv/partol.hpp"
using Partol = service_interfaces::srv::Partol;
#include <chrono>
using namespace std::chrono_literals;

rclcpp::TimerBase::SharedPtr timer_;
rclcpp::Client<Partol>::SharedPtr partol_client_;
             partol_client_ = this->create_client<Partol>("partol");
             timer_ = this->create_wall_timer(10s, [&]()->void{
            while(!this->partol_client_->wait_for_service(1s))
            {
                if(rclcpp::ok())
                {
                    RCLCPP_ERROR(this->get_logger(), "等待中RCLCPP出错");
                    return;
                }
                RCLCPP_ERROR(this->get_logger(), "等待中");
                
            }
            
            auto request = std::make_shared<Partol::Request>();
            request->target_x = rand() % 15;
            request->target_y = rand() % 15;
            RCLCPP_ERROR(this->get_logger(), "目标点确定");

            this->partol_client_->async_send_request(request, [&]
            (rclcpp::Client<Partol>::SharedFuture result_future)->void{
                auto response = result_future.get();
                if(response->result==Partol::Response::SUCCESS)
                {
                    RCLCPP_ERROR(this->get_logger(), "请求成功");
                }
                if(response->result==Partol::Response::FAIL)
                {
                    RCLCPP_ERROR(this->get_logger(), "请求失败");
                }
            });